generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  permissions Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]

  @@map("roles")
}

model User {
  id                          Int                         @id @default(autoincrement())
  username                    String                      @unique
  password_hash               String                      @map("password_hash")
  locked                      Boolean                     @default(false)
  attempts                    Int                         @default(0)
  branchCode                  String                      @map("branch_code")
  createdAt                   DateTime                    @default(now()) @map("created_at")
  createdBy                   String?                     @map("created_by")
  email                       String?                     @unique
  firstName                   String?                     @map("first_name")
  isActive                    Boolean                     @default(true) @map("is_active")
  lastLogin                   DateTime?                   @map("last_login") @db.Timestamptz(6)
  lastName                    String?                     @map("last_name")
  phoneNumber                 String?                     @map("phone_number")
  roleId                      Int                         @map("role_id")
  updatedAt                   DateTime                    @updatedAt @map("updated_at")
  approvalHistory             ApprovalHistory[]
  assetAssignments            Asset[]
  auditLogs                   AuditLog[]
  processedBalanceAdjustments BalanceAdjustment[]
  signedContracts             Contract[]
  createdContributionPlans    ContributionPlan[]
  currencyConversions         CurrencyConversionHistory[]
  exchangeRatesCreated        ExchangeRate[]
  expenditureApprovals        Expenditure[]               @relation("ExpenditureApprovals")
  expenditureProcessing       Expenditure[]               @relation("ExpenditureProcessing")
  expenditureRequests         Expenditure[]               @relation("ExpenditureRequests")
  uploadedReceipts            ExpenseReceipt[]
  verifiedReceipts            ExpenseReceipt[]            @relation("ReceiptVerification")
  loginHistory                LoginHistory[]
  processedContributions      MemberContribution[]
  passwordResetTokens         PasswordResetToken[]
  createdReminders            PaymentReminder[]
  uploadedProjectDocs         ProjectDocument[]
  assignedProjectTasks        ProjectTask[]
  refreshTokens               RefreshToken[]
  processedRefunds            Refund[]
  supplierEvaluations         SupplierEvaluation[]
  supplierStatusChanges       SupplierStatusHistory[]
  supplierBans                Supplier[]                  @relation("SupplierBans")
  generalTransactions         Transaction[]
  branch                      Branch                      @relation(fields: [branchCode], references: [code])
  role                        Role                        @relation(fields: [roleId], references: [id])

  @@map("users")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model LoginHistory {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  success   Boolean
  error     String?
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model Branch {
  code             String            @id
  name             String            @unique
  address          String?
  createdAt        DateTime          @default(now()) @map("created_at")
  isActive         Boolean           @default(true) @map("is_active")
  phoneNumber      String?           @map("phone_number")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  assets           Asset[]
  expenditureHeads ExpenditureHead[]
  expenditures     Expenditure[]
  members          Member[]
  projects         Project[]
  revenueHeads     RevenueHead[]
  transactions     Transaction[]
  users            User[]

  @@map("branches")
}

model Member {
  id                    Int                     @id @default(autoincrement())
  memberNumber          String                  @unique @map("member_number")
  firstName             String                  @map("first_name")
  lastName              String                  @map("last_name")
  dateOfBirth           DateTime?               @map("date_of_birth")
  ageCategory           AgeCategory             @default(ADULT) @map("age_category")
  phoneNumber           String?                 @map("phone_number")
  email                 String?
  address               String?
  branchCode            String                  @map("branch_code")
  isActive              Boolean                 @default(true) @map("is_active")
  joinedDate            DateTime                @default(now()) @map("joined_date")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  contributionPlans     ContributionPlan[]
  reimbursements        Expenditure[]
  memberBalances        MemberBalance[]
  contributions         MemberContribution[]
  memberProjects        MemberProject[]
  branch                Branch                  @relation(fields: [branchCode], references: [code])
  paymentPatternHistory PaymentPatternHistory[]
  paymentReminders      PaymentReminder[]
  generalTransactions   Transaction[]

  @@map("members")
}

model ContributionPlan {
  id               Int               @id @default(autoincrement())
  memberId         Int               @map("member_id")
  projectId        Int?              @map("project_id")
  revenueHeadCode  String?           @map("revenue_head_code")
  planName         String            @map("plan_name")
  paymentPattern   PaymentPattern    @map("payment_pattern")
  frequency        PaymentFrequency  @default(MONTHLY)
  amount           Decimal           @db.Decimal(120, 2)
  currencyCode     String            @map("currency_code")
  startDate        DateTime          @map("start_date")
  endDate          DateTime?         @map("end_date")
  nextPaymentDate  DateTime?         @map("next_payment_date")
  reminderDays     Int               @default(7) @map("reminder_days")
  autoRenew        Boolean           @default(false) @map("auto_renew")
  isActive         Boolean           @default(true) @map("is_active")
  createdBy        Int               @map("created_by")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  creator          User              @relation(fields: [createdBy], references: [id])
  currency         Currency          @relation(fields: [currencyCode], references: [code])
  member           Member            @relation(fields: [memberId], references: [id])
  project          Project?          @relation(fields: [projectId], references: [id])
  revenueHead      RevenueHead?      @relation(fields: [revenueHeadCode], references: [code])
  paymentReminders PaymentReminder[]

  @@map("contribution_plans")
}

model PaymentReminder {
  id                 Int                @id @default(autoincrement())
  memberId           Int                @map("member_id")
  contributionPlanId Int?               @map("contribution_plan_id")
  reminderType       ReminderType       @map("reminder_type")
  dueDate            DateTime           @map("due_date")
  amount             Decimal            @db.Decimal(120, 2)
  currencyCode       String             @map("currency_code")
  message            String?
  sentAt             DateTime?          @map("sent_at")
  method             NotificationMethod @default(EMAIL)
  status             ReminderStatus     @default(PENDING)
  createdBy          Int                @map("created_by")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  contributionPlan   ContributionPlan?  @relation(fields: [contributionPlanId], references: [id])
  creator            User               @relation(fields: [createdBy], references: [id])
  currency           Currency           @relation(fields: [currencyCode], references: [code])
  member             Member             @relation(fields: [memberId], references: [id])

  @@map("payment_reminders")
}

model MemberBalance {
  id           Int                 @id @default(autoincrement())
  memberId     Int                 @map("member_id")
  projectId    Int?                @map("project_id")
  balanceType  BalanceType         @map("balance_type")
  balance      Decimal             @db.Decimal(120, 2)
  creditLimit  Decimal?            @map("credit_limit") @db.Decimal(120, 2)
  currencyCode String              @map("currency_code")
  lastUpdated  DateTime            @updatedAt @map("last_updated")
  createdAt    DateTime            @default(now()) @map("created_at")
  adjustments  BalanceAdjustment[]
  currency     Currency            @relation(fields: [currencyCode], references: [code])
  member       Member              @relation(fields: [memberId], references: [id])
  project      Project?            @relation(fields: [projectId], references: [id])

  @@unique([memberId, projectId, balanceType])
  @@map("member_balances")
}

model BalanceAdjustment {
  id              Int            @id @default(autoincrement())
  memberBalanceId Int            @map("member_balance_id")
  adjustmentType  AdjustmentType @map("adjustment_type")
  amount          Decimal        @db.Decimal(120, 2)
  reason          String
  referenceNumber String?        @map("reference_number")
  processedBy     Int            @map("processed_by")
  processedAt     DateTime       @default(now()) @map("processed_at")
  notes           String?
  memberBalance   MemberBalance  @relation(fields: [memberBalanceId], references: [id])
  processor       User           @relation(fields: [processedBy], references: [id])

  @@map("balance_adjustments")
}

model PaymentPatternHistory {
  id              Int            @id @default(autoincrement())
  memberId        Int            @map("member_id")
  previousPattern PaymentPattern @map("previous_pattern")
  newPattern      PaymentPattern @map("new_pattern")
  analysisDate    DateTime       @map("analysis_date")
  confidence      Float          @default(0.0)
  reasonCode      String?        @map("reason_code")
  createdAt       DateTime       @default(now()) @map("created_at")
  member          Member         @relation(fields: [memberId], references: [id])

  @@map("payment_pattern_history")
}

model RevenueHead {
  code              String             @id
  name              String
  branchCode        String             @map("branch_code")
  createdAt         DateTime           @default(now()) @map("created_at")
  description       String?
  isActive          Boolean            @default(true) @map("is_active")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  project           Project?
  contributionPlans ContributionPlan[]
  branch            Branch             @relation(fields: [branchCode], references: [code])
  transactions      Transaction[]

  @@unique([name, branchCode])
  @@map("revenue_heads")
}

model ExpenditureHead {
  code             String              @id
  name             String
  branchCode       String              @map("branch_code")
  approvalRequired Boolean             @default(false) @map("approval_required")
  budgetLimit      Decimal?            @map("budget_limit") @db.Decimal(120, 2)
  category         ExpenditureCategory @default(OPERATIONAL)
  createdAt        DateTime            @default(now()) @map("created_at")
  description      String?
  isActive         Boolean             @default(true) @map("is_active")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  budgetLines      BudgetLine[]
  branch           Branch              @relation(fields: [branchCode], references: [code])
  expenditures     Expenditure[]

  @@unique([name, branchCode])
  @@map("expenditure_heads")
}

model Project {
  id                Int                  @id @default(autoincrement())
  name              String
  description       String?
  targetAmount      Decimal              @map("target_amount") @db.Decimal(120, 2)
  currencyCode      String               @map("currency_code")
  branchCode        String               @map("branch_code")
  startDate         DateTime             @map("start_date")
  endDate           DateTime?            @map("end_date")
  actualStartDate   DateTime?            @map("actual_start_date")
  actualEndDate     DateTime?            @map("actual_end_date")
  status            ProjectStatus        @default(PLANNING)
  priority          ProjectPriority      @default(MEDIUM)
  progress          Float                @default(0.0)
  isActive          Boolean              @default(true) @map("is_active")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")

  revenueHeadCode   String?              @unique @map("revenue_head_code")
  revenueHead       RevenueHead?         @relation(fields: [revenueHeadCode], references: [code], onDelete: Cascade)

  budgetAllocations BudgetAllocation[]
  budgetLines       BudgetLine[]
  contracts         Contract[]
  contributionPlans ContributionPlan[]
  expenditures      Expenditure[]
  memberBalances    MemberBalance[]
  contributions     MemberContribution[]
  memberProjects    MemberProject[]
  documents         ProjectDocument[]
  milestones        ProjectMilestone[]
  tasks             ProjectTask[]
  updates           ProjectUpdate[]
  branch            Branch               @relation(fields: [branchCode], references: [code])
  currency          Currency             @relation(fields: [currencyCode], references: [code])

  @@map("projects")
}

model ProjectMilestone {
  id                 Int             @id @default(autoincrement())
  projectId          Int             @map("project_id")
  name               String
  description        String?
  targetDate         DateTime        @map("target_date")
  actualDate         DateTime?       @map("actual_date")
  budgetAllocation   Decimal?        @map("budget_allocation") @db.Decimal(120, 2)
  actualCost         Decimal?        @map("actual_cost") @db.Decimal(120, 2)
  status             MilestoneStatus @default(PENDING)
  priority           Int             @default(1)
  progress           Float           @default(0.0)
  dependencies       Json?
  deliverables       String?
  completionCriteria String?         @map("completion_criteria")
  notes              String?
  completedBy        Int?            @map("completed_by")
  completedAt        DateTime?       @map("completed_at")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  expenditures       Expenditure[]
  project            Project         @relation(fields: [projectId], references: [id])
  tasks              ProjectTask[]

  @@map("project_milestones")
}

model ProjectTask {
  id             Int               @id @default(autoincrement())
  projectId      Int               @map("project_id")
  milestoneId    Int?              @map("milestone_id")
  title          String
  description    String?
  assignedTo     Int?              @map("assigned_to")
  dueDate        DateTime?         @map("due_date")
  status         TaskStatus        @default(PENDING)
  priority       TaskPriority      @default(MEDIUM)
  estimatedHours Int?              @map("estimated_hours")
  actualHours    Int?              @map("actual_hours")
  completedAt    DateTime?         @map("completed_at")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  assignee       User?             @relation(fields: [assignedTo], references: [id])
  milestone      ProjectMilestone? @relation(fields: [milestoneId], references: [id])
  project        Project           @relation(fields: [projectId], references: [id])

  @@map("project_tasks")
}

model ProjectUpdate {
  id         Int        @id @default(autoincrement())
  projectId  Int        @map("project_id")
  title      String
  content    String
  updateType UpdateType @map("update_type")
  createdBy  String     @map("created_by")
  createdAt  DateTime   @default(now()) @map("created_at")
  project    Project    @relation(fields: [projectId], references: [id])

  @@map("project_updates")
}

model ProjectDocument {
  id            Int               @id @default(autoincrement())
  projectId     Int               @map("project_id")
  fileName      String            @map("file_name")
  originalName  String            @map("original_name")
  filePath      String            @map("file_path")
  fileSize      Int               @map("file_size")
  mimeType      String            @map("mime_type")
  fileType      DocumentType      @map("file_type")
  category      DocumentCategory  @default(GENERAL)
  description   String?
  tags          String[]
  isPublic      Boolean           @default(false) @map("is_public")
  downloadCount Int               @default(0) @map("download_count")
  thumbnailPath String?           @map("thumbnail_path")
  duration      Int?
  dimensions    String?
  checksum      String?
  uploadedBy    Int               @map("uploaded_by")
  uploadedAt    DateTime          @default(now()) @map("uploaded_at")
  lastAccessed  DateTime?         @map("last_accessed")
  versionNumber Int               @default(1) @map("version_number")
  parentDocId   Int?              @map("parent_doc_id")
  parentDoc     ProjectDocument?  @relation("DocumentVersions", fields: [parentDocId], references: [id])
  versions      ProjectDocument[] @relation("DocumentVersions")
  project       Project           @relation(fields: [projectId], references: [id])
  uploader      User              @relation(fields: [uploadedBy], references: [id])

  @@map("project_documents")
}

model Currency {
  code                                 String                      @id
  name                                 String                      @unique
  symbol                               String?
  isActive                             Boolean                     @default(true) @map("is_active")
  isBaseCurrency                       Boolean                     @default(false) @map("is_base_currency")
  decimalPlaces                        Int                         @default(2) @map("decimal_places")
  createdAt                            DateTime                    @default(now()) @map("created_at")
  updatedAt                            DateTime                    @updatedAt @map("updated_at")
  assets                               Asset[]
  budgetAllocations                    BudgetAllocation[]
  budgetPeriods                        BudgetPeriod[]
  contracts                            Contract[]
  contributionPlans                    ContributionPlan[]
  currencyConversionHistoryAsConverted CurrencyConversionHistory[] @relation("ConvertedCurrency")
  currencyConversionHistoryAsOriginal  CurrencyConversionHistory[] @relation("OriginalCurrency")
  allowedPaymentMethods                CurrencyPaymentMethod[]
  exchangeRateHistory                  ExchangeRateHistory[]       @relation("BaseExchangeRate")
  targetExchangeRateHistory            ExchangeRateHistory[]       @relation("TargetExchangeRate")
  baseRates                            ExchangeRate[]              @relation("BaseCurrency")
  targetRates                          ExchangeRate[]              @relation("TargetCurrency")
  expenditures                         Expenditure[]
  maintenanceRecords                   MaintenanceRecord[]
  memberBalances                       MemberBalance[]
  memberContributions                  MemberContribution[]
  memberProjects                       MemberProject[]
  paymentReminders                     PaymentReminder[]
  projects                             Project[]
  refunds                              Refund[]
  transactions                         Transaction[]
  currencyConversionHistory            CurrencyConversionHistory[] @relation("CurrencyToCurrencyConversionHistory")

  @@map("currencies")
}

model ExchangeRate {
  id                     Int                         @id @default(autoincrement())
  baseCurrencyCode       String                      @map("base_currency_code")
  targetCurrencyCode     String                      @map("target_currency_code")
  rate                   Decimal                     @db.Decimal(20, 10)
  inverseRate            Decimal?                    @map("inverse_rate") @db.Decimal(20, 10)
  effectiveDate          DateTime                    @map("effective_date")
  expiryDate             DateTime?                   @map("expiry_date")
  source                 RateSource                  @default(MANUAL)
  sourceReference        String?                     @map("source_reference")
  isActive               Boolean                     @default(true) @map("is_active")
  createdBy              Int?                        @map("created_by")
  createdAt              DateTime                    @default(now()) @map("created_at")
  updatedAt              DateTime                    @updatedAt @map("updated_at")
  historicalTransactions CurrencyConversionHistory[]
  baseCurrency           Currency                    @relation("BaseCurrency", fields: [baseCurrencyCode], references: [code])
  creator                User?                       @relation(fields: [createdBy], references: [id])
  targetCurrency         Currency                    @relation("TargetCurrency", fields: [targetCurrencyCode], references: [code])

  @@unique([baseCurrencyCode, targetCurrencyCode, effectiveDate])
  @@map("exchange_rates")
}

model CurrencyConversionHistory {
  id                    Int          @id @default(autoincrement())
  exchangeRateId        Int          @map("exchange_rate_id")
  originalAmount        Decimal      @map("original_amount") @db.Decimal(120, 2)
  originalCurrencyCode  String       @map("original_currency_code")
  convertedAmount       Decimal      @map("converted_amount") @db.Decimal(120, 2)
  convertedCurrencyCode String       @map("converted_currency_code")
  conversionRate        Decimal      @map("conversion_rate") @db.Decimal(20, 10)
  transactionType       String       @map("transaction_type")
  transactionId         Int          @map("transaction_id")
  convertedAt           DateTime     @default(now()) @map("converted_at")
  convertedBy           Int          @map("converted_by")
  converter             User         @relation(fields: [convertedBy], references: [id])
  convertedCurrency     Currency     @relation("ConvertedCurrency", fields: [convertedCurrencyCode], references: [code])
  exchangeRate          ExchangeRate @relation(fields: [exchangeRateId], references: [id])
  originalCurrency      Currency     @relation("OriginalCurrency", fields: [originalCurrencyCode], references: [code])
  Currency              Currency[]   @relation("CurrencyToCurrencyConversionHistory")

  @@map("currency_conversion_history")
}

model ExchangeRateHistory {
  id                 Int        @id @default(autoincrement())
  baseCurrencyCode   String     @map("base_currency_code")
  targetCurrencyCode String     @map("target_currency_code")
  rate               Decimal    @db.Decimal(20, 10)
  date               DateTime
  highRate           Decimal?   @map("high_rate") @db.Decimal(20, 10)
  lowRate            Decimal?   @map("low_rate") @db.Decimal(20, 10)
  openRate           Decimal?   @map("open_rate") @db.Decimal(20, 10)
  closeRate          Decimal?   @map("close_rate") @db.Decimal(20, 10)
  volume             Decimal?   @db.Decimal(20, 10)
  source             RateSource @default(FOREX_API)
  sourceReference    String?    @map("source_reference")
  createdAt          DateTime   @default(now()) @map("created_at")
  baseCurrency       Currency   @relation("BaseExchangeRate", fields: [baseCurrencyCode], references: [code])
  targetCurrency     Currency   @relation("TargetExchangeRate", fields: [targetCurrencyCode], references: [code])

  @@unique([baseCurrencyCode, targetCurrencyCode, date])
  @@map("exchange_rate_history")
}

model BudgetAllocation {
  id              Int      @id @default(autoincrement())
  projectId       Int      @map("project_id")
  category        String
  allocatedAmount Decimal  @map("allocated_amount") @db.Decimal(120, 2)
  spentAmount     Decimal  @default(0) @map("spent_amount") @db.Decimal(120, 2)
  currencyCode    String   @map("currency_code")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  currency        Currency @relation(fields: [currencyCode], references: [code])
  project         Project  @relation(fields: [projectId], references: [id])

  @@map("budget_allocations")
}

model MemberProject {
  id             Int      @id @default(autoincrement())
  memberId       Int      @map("member_id")
  projectId      Int      @map("project_id")
  requiredAmount Decimal  @map("required_amount") @db.Decimal(120, 2)
  currencyCode   String   @map("currency_code")
  isExempt       Boolean  @default(false) @map("is_exempt")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  currency       Currency @relation(fields: [currencyCode], references: [code])
  member         Member   @relation(fields: [memberId], references: [id])
  project        Project  @relation(fields: [projectId], references: [id])

  @@unique([memberId, projectId])
  @@map("member_projects")
}

model MemberContribution {
  id              Int                @id @default(autoincrement())
  receiptNumber   String             @unique @map("receipt_number")
  memberId        Int                @map("member_id")
  projectId       Int?               @map("project_id")
  amount          Decimal            @db.Decimal(120, 2)
  currencyCode    String             @map("currency_code")
  paymentMethodId Int                @map("payment_method_id")
  referenceNumber String?            @map("reference_number")
  paymentDate     DateTime           @default(now()) @map("payment_date")
  processedBy     Int                @map("processed_by")
  notes           String?
  status          ContributionStatus @default(COMPLETED)
  isRecurring     Boolean            @default(false) @map("is_recurring")
  recurringPlanId Int?               @map("recurring_plan_id")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  currency        Currency           @relation(fields: [currencyCode], references: [code])
  member          Member             @relation(fields: [memberId], references: [id])
  paymentMethod   PaymentMethod      @relation(fields: [paymentMethodId], references: [id])
  processor       User               @relation(fields: [processedBy], references: [id])
  project         Project?           @relation(fields: [projectId], references: [id])

  @@map("member_contributions")
}

model Expenditure {
  id                  Int                   @id @default(autoincrement())
  voucherNumber       String                @unique @map("voucher_number")
  expenditureHeadCode String                @map("expenditure_head_code")
  projectId           Int?                  @map("project_id")
  milestoneId         Int?                  @map("milestone_id")

  description         String
  amount              Decimal               @db.Decimal(120, 2)
  taxAmount           Decimal?              @default(0) @map("tax_amount") @db.Decimal(120, 2)
  totalAmount         Decimal               @map("total_amount") @db.Decimal(120, 2)
  currencyCode        String                @map("currency_code")
  paymentMethodId     Int                   @map("payment_method_id")
  referenceNumber     String?               @map("reference_number")
  branchCode          String                @map("branch_code")
  expenseDate         DateTime              @map("expense_date")
  paymentDate         DateTime?             @map("payment_date")
  dueDate             DateTime?             @map("due_date")
  frequency           ExpenseFrequency      @default(ONE_TIME)
  urgency             ExpenseUrgency        @default(NORMAL)
  isRecurring         Boolean               @default(false) @map("is_recurring")
  recurringUntil      DateTime?             @map("recurring_until")
  approvalStatus      ApprovalStatus        @default(PENDING) @map("approval_status")
  approvedBy          Int?                  @map("approved_by")
  approvedAt          DateTime?             @map("approved_at")
  requestedBy         Int                   @map("requested_by")
  processedBy         Int?                  @map("processed_by")
  notes               String?
  internalNotes       String?               @map("internal_notes")
  tags                String[]
  isReimbursement     Boolean               @default(false) @map("is_reimbursement")
  reimbursedTo        Int?                  @map("reimbursed_to")
  budgetYear          Int                   @map("budget_year")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  approvalHistory     ApprovalHistory[]
  assetCreated        Asset?
  lineItems           ExpenditureLineItem[]
  approver            User?                 @relation("ExpenditureApprovals", fields: [approvedBy], references: [id])
  branch              Branch                @relation(fields: [branchCode], references: [code])
  currency            Currency              @relation(fields: [currencyCode], references: [code])
  expenditureHead     ExpenditureHead       @relation(fields: [expenditureHeadCode], references: [code])
  milestone           ProjectMilestone?     @relation(fields: [milestoneId], references: [id])
  paymentMethod       PaymentMethod         @relation(fields: [paymentMethodId], references: [id])
  processor           User?                 @relation("ExpenditureProcessing", fields: [processedBy], references: [id])
  project             Project?              @relation(fields: [projectId], references: [id])
  reimbursee          Member?               @relation(fields: [reimbursedTo], references: [id])
  requester           User                  @relation("ExpenditureRequests", fields: [requestedBy], references: [id])
  
  receipts            ExpenseReceipt[]

  @@map("expenditures")
}

model ExpenditureLineItem {
  id            Int         @id @default(autoincrement())
  expenditureId Int         @map("expenditure_id")
  description   String
  quantity      Decimal     @db.Decimal(10, 3)
  unitPrice     Decimal     @map("unit_price") @db.Decimal(120, 2)
  totalPrice    Decimal     @map("total_price") @db.Decimal(120, 2)
  taxRate       Decimal?    @default(0) @map("tax_rate") @db.Decimal(5, 2)
  notes         String?
  expenditure   Expenditure @relation(fields: [expenditureId], references: [id], onDelete: Cascade)

  @@map("expenditure_line_items")
}

model ExpenseReceipt {
  id            Int         @id @default(autoincrement())
  expenditureId Int         @map("expenditure_id")
  fileName      String      @map("file_name")
  originalName  String      @map("original_name")
  filePath      String      @map("file_path")
  fileSize      Int         @map("file_size")
  mimeType      String      @map("mime_type")
  receiptType   ReceiptType @map("receipt_type")
  receiptNumber String?     @map("receipt_number")
  merchantName  String?     @map("merchant_name")
  receiptDate   DateTime?   @map("receipt_date")
  ocrText       String?     @map("ocr_text")
  isVerified    Boolean     @default(false) @map("is_verified")
  uploadedBy    Int         @map("uploaded_by")
  uploadedAt    DateTime    @default(now()) @map("uploaded_at")
  verifiedBy    Int?        @map("verified_by")
  verifiedAt    DateTime?   @map("verified_at")
  expenditure   Expenditure @relation(fields: [expenditureId], references: [id], onDelete: Cascade)
  uploader      User        @relation(fields: [uploadedBy], references: [id])
  verifier      User?       @relation("ReceiptVerification", fields: [verifiedBy], references: [id])

  @@map("expense_receipts")
}

model Supplier {
  id                Int                     @id @default(autoincrement())
  code              String                  @unique
  name              String
  businessName      String?                 @map("business_name")
  contactPerson     String?                 @map("contact_person")
  email             String?
  phoneNumber       String?                 @map("phone_number")
  address           String?
  taxNumber         String?                 @map("tax_number")
  bankAccount       String?                 @map("bank_account")
  paymentTerms      Int?                    @default(30) @map("payment_terms")
  creditLimit       Decimal?                @map("credit_limit") @db.Decimal(120, 2)
  supplierType      SupplierType            @default(VENDOR) @map("supplier_type")
  rating            Int?                    @default(5)
  status            SupplierStatus          @default(ACTIVE)
  bannedReason      String?                 @map("banned_reason")
  bannedBy          Int?                    @map("banned_by")
  bannedAt          DateTime?               @map("banned_at")
  blacklistUntil    DateTime?               @map("blacklist_until")
  riskLevel         RiskLevel               @default(LOW) @map("risk_level")
  notes             String?
  isPreferred       Boolean                 @default(false) @map("is_preferred")
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")
  contracts         Contract[]
  
  MaintenanceRecord MaintenanceRecord[]
  evaluations       SupplierEvaluation[]
  statusHistory     SupplierStatusHistory[]
  banner            User?                   @relation("SupplierBans", fields: [bannedBy], references: [id])

  @@map("suppliers")
}

model SupplierStatusHistory {
  id         Int            @id @default(autoincrement())
  supplierId Int            @map("supplier_id")
  oldStatus  SupplierStatus @map("old_status")
  newStatus  SupplierStatus @map("new_status")
  reason     String
  changedBy  Int            @map("changed_by")
  changedAt  DateTime       @default(now()) @map("changed_at")
  reviewDate DateTime?      @map("review_date")
  changer    User           @relation(fields: [changedBy], references: [id])
  supplier   Supplier       @relation(fields: [supplierId], references: [id])

  @@map("supplier_status_history")
}

model SupplierEvaluation {
  id               Int      @id @default(autoincrement())
  supplierId       Int      @map("supplier_id")
  evaluatedBy      Int      @map("evaluated_by")
  qualityRating    Int      @map("quality_rating")
  timelinessRating Int      @map("timeliness_rating")
  valueRating      Int      @map("value_rating")
  serviceRating    Int      @map("service_rating")
  overallRating    Float    @map("overall_rating")
  comments         String?
  wouldRecommend   Boolean  @default(true) @map("would_recommend")
  evaluationDate   DateTime @default(now()) @map("evaluation_date")
  evaluator        User     @relation(fields: [evaluatedBy], references: [id])
  supplier         Supplier @relation(fields: [supplierId], references: [id])

  @@map("supplier_evaluations")
}

model Contract {
  id             Int                 @id @default(autoincrement())
  contractNumber String              @unique @map("contract_number")
  supplierId     Int                 @map("supplier_id")
  projectId      Int?                @map("project_id")
  title          String
  description    String?
  contractValue  Decimal             @map("contract_value") @db.Decimal(120, 2)
  currencyCode   String              @map("currency_code")
  startDate      DateTime            @map("start_date")
  endDate        DateTime            @map("end_date")
  renewalDate    DateTime?           @map("renewal_date")
  status         ContractStatus      @default(DRAFT)
  contractType   ContractType        @map("contract_type")
  paymentTerms   String?             @map("payment_terms")
  deliverables   String?
  penalties      String?
  signedBy       Int?                @map("signed_by")
  signedDate     DateTime?           @map("signed_date")
  documentPath   String?             @map("document_path")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  milestones     ContractMilestone[]
  currency       Currency            @relation(fields: [currencyCode], references: [code])
  project        Project?            @relation(fields: [projectId], references: [id])
  signer         User?               @relation(fields: [signedBy], references: [id])
  supplier       Supplier            @relation(fields: [supplierId], references: [id])

  @@map("contracts")
}

model ContractMilestone {
  id          Int             @id @default(autoincrement())
  contractId  Int             @map("contract_id")
  description String
  dueDate     DateTime        @map("due_date")
  amount      Decimal?        @db.Decimal(120, 2)
  status      MilestoneStatus @default(PENDING)
  completedAt DateTime?       @map("completed_at")
  notes       String?
  contract    Contract        @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("contract_milestones")
}

model Asset {
  id                 Int                 @id @default(autoincrement())
  assetNumber        String              @unique @map("asset_number")
  name               String
  description        String?
  category           AssetCategory
  expenditureId      Int?                @unique @map("expenditure_id")
  branchCode         String              @map("branch_code")
  purchasePrice      Decimal             @map("purchase_price") @db.Decimal(120, 2)
  currentValue       Decimal?            @map("current_value") @db.Decimal(120, 2)
  currencyCode       String              @map("currency_code")
  purchaseDate       DateTime            @map("purchase_date")
  warrantyExpiry     DateTime?           @map("warranty_expiry")
  condition          AssetCondition      @default(EXCELLENT)
  location           String?
  assignedTo         Int?                @map("assigned_to")
  depreciationRate   Decimal?            @map("depreciation_rate") @db.Decimal(5, 2)
  isInsured          Boolean             @default(false) @map("is_insured")
  insuranceExpiry    DateTime?           @map("insurance_expiry")
  serialNumber       String?             @map("serial_number")
  barcode            String?
  isActive           Boolean             @default(true) @map("is_active")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  assignee           User?               @relation(fields: [assignedTo], references: [id])
  branch             Branch              @relation(fields: [branchCode], references: [code])
  currency           Currency            @relation(fields: [currencyCode], references: [code])
  expenditure        Expenditure?        @relation(fields: [expenditureId], references: [id])
  maintenanceRecords MaintenanceRecord[]

  @@map("assets")
}

model MaintenanceRecord {
  id              Int             @id @default(autoincrement())
  assetId         Int             @map("asset_id")
  maintenanceType MaintenanceType @map("maintenance_type")
  description     String
  cost            Decimal?        @db.Decimal(120, 2)
  currencyCode    String?         @map("currency_code")
  supplierId      Int?            @map("supplier_id")
  scheduledDate   DateTime?       @map("scheduled_date")
  completedDate   DateTime?       @map("completed_date")
  nextServiceDate DateTime?       @map("next_service_date")
  performedBy     String?         @map("performed_by")
  notes           String?
  createdAt       DateTime        @default(now()) @map("created_at")
  asset           Asset           @relation(fields: [assetId], references: [id])
  currency        Currency?       @relation(fields: [currencyCode], references: [code])
  supplier        Supplier?       @relation(fields: [supplierId], references: [id])

  @@map("maintenance_records")
}

model ApprovalHistory {
  id            Int            @id @default(autoincrement())
  expenditureId Int            @map("expenditure_id")
  approverLevel Int            @map("approver_level")
  approvedBy    Int            @map("approved_by")
  status        ApprovalStatus
  comments      String?
  approvedAt    DateTime       @default(now()) @map("approved_at")
  approver      User           @relation(fields: [approvedBy], references: [id])
  expenditure   Expenditure    @relation(fields: [expenditureId], references: [id], onDelete: Cascade)

  @@map("approval_history")
}

model BudgetPeriod {
  id           Int          @id @default(autoincrement())
  name         String
  startDate    DateTime     @map("start_date")
  endDate      DateTime     @map("end_date")
  budgetType   BudgetType   @map("budget_type")
  status       BudgetStatus @default(DRAFT)
  totalBudget  Decimal      @map("total_budget") @db.Decimal(120, 2)
  actualSpent  Decimal      @default(0) @map("actual_spent") @db.Decimal(120, 2)
  currencyCode String       @map("currency_code")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  budgetLines  BudgetLine[]
  currency     Currency     @relation(fields: [currencyCode], references: [code])

  @@map("budget_periods")
}

model BudgetLine {
  id                  Int             @id @default(autoincrement())
  budgetPeriodId      Int             @map("budget_period_id")
  expenditureHeadCode String          @map("expenditure_head_code")
  projectId           Int?            @map("project_id")
  budgetedAmount      Decimal         @map("budgeted_amount") @db.Decimal(120, 2)
  actualAmount        Decimal         @default(0) @map("actual_amount") @db.Decimal(120, 2)
  variance            Decimal         @default(0) @db.Decimal(120, 2)
  variancePercent     Decimal         @default(0) @map("variance_percent") @db.Decimal(5, 2)
  notes               String?
  budgetPeriod        BudgetPeriod    @relation(fields: [budgetPeriodId], references: [id])
  expenditureHead     ExpenditureHead @relation(fields: [expenditureHeadCode], references: [code])
  project             Project?        @relation(fields: [projectId], references: [id])

  @@unique([budgetPeriodId, expenditureHeadCode, projectId])
  @@map("budget_lines")
}

model Transaction {
  id              Int           @id @default(autoincrement())
  receiptNumber   String        @unique @map("receipt_number")
  revenueHeadCode String        @map("revenue_head_code")
  amount          Decimal       @db.Decimal(120, 2)
  branchCode      String        @map("branch_code")
  transactionDate DateTime      @default(now()) @map("transaction_date") @db.Timestamptz(6)
  createdAt       DateTime      @default(now()) @map("created_at")
  currencyCode    String        @map("currency_code")
  memberId        Int           @map("member_id")
  notes           String?
  paymentMethodId Int           @map("payment_method_id")
  referenceNumber String?       @map("reference_number")
  status          String        @default("completed")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  userId          Int           @map("user_id")
  refunds         Refund[]
  branch          Branch        @relation(fields: [branchCode], references: [code])
  currency        Currency      @relation(fields: [currencyCode], references: [code])
  member          Member        @relation(fields: [memberId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  revenueHead     RevenueHead   @relation(fields: [revenueHeadCode], references: [code])
  user            User          @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Refund {
  id            Int         @id @default(autoincrement())
  transactionId Int         @map("transaction_id")
  amount        Decimal     @db.Decimal(120, 2)
  currencyCode  String      @map("currency_code")
  reason        String
  processedById Int         @map("processed_by_id")
  processedAt   DateTime    @default(now()) @map("processed_at")
  currency      Currency    @relation(fields: [currencyCode], references: [code])
  processedBy   User        @relation(fields: [processedById], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("refunds")
}

model PaymentMethod {
  id                  Int                     @id @default(autoincrement())
  name                String                  @unique
  description         String?
  isActive            Boolean                 @default(true) @map("is_active")
  createdAt           DateTime                @default(now()) @map("created_at")
  updatedAt           DateTime                @updatedAt @map("updated_at")
  allowedCurrencies   CurrencyPaymentMethod[]
  expenditures        Expenditure[]
  memberContributions MemberContribution[]
  transactions        Transaction[]

  @@map("payment_methods")
}

model CurrencyPaymentMethod {
  currencyCode    String        @map("currency_code")
  paymentMethodId Int           @map("payment_method_id")
  isActive        Boolean       @default(true) @map("is_active")
  currency        Currency      @relation(fields: [currencyCode], references: [code])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@id([currencyCode, paymentMethodId])
  @@map("currency_payment_methods")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  username  String
  action    String
  tableName String   @map("table_name")
  recordId  String   @map("record_id")
  oldValues Json?    @map("old_values")
  newValues Json?    @map("new_values")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  timestamp DateTime @default(now()) @db.Timestamptz(6)
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum AgeCategory {
  ADULT
  YOUTH
  CHILD
  ELDERLY
}

enum PaymentPattern {
  RECURRING
  FREQUENT
  OCCASIONAL
  ONE_TIME
  SEASONAL
  PLEDGE_BASED
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  BI_WEEKLY
  MONTHLY
  BI_MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
  CUSTOM
}

enum ReminderType {
  CONTRIBUTION_DUE
  OVERDUE_PAYMENT
  UPCOMING_PAYMENT
  PLEDGE_REMINDER
  BALANCE_LOW
}

enum NotificationMethod {
  EMAIL
  SMS
  PHONE_CALL
  IN_PERSON
  PUSH_NOTIFICATION
}

enum ReminderStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum BalanceType {
  CREDIT
  DEBIT
  PLEDGE
  PREPAID
}

enum AdjustmentType {
  REFUND
  CREDIT
  DEBIT
  TRANSFER
  CORRECTION
  WRITE_OFF
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
  BLOCKED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum UpdateType {
  PROGRESS
  MILESTONE
  ISSUE
  GENERAL
  FINANCIAL
}

enum DocumentType {
  DOCUMENT
  SPREADSHEET
  PRESENTATION
  IMAGE
  VIDEO
  AUDIO
  ARCHIVE
  CODE
  OTHER
}

enum DocumentCategory {
  GENERAL
  CONTRACTS
  PERMITS
  ARCHITECTURAL_PLANS
  BUDGET_DOCUMENTS
  PROGRESS_REPORTS
  MEETING_MINUTES
  CORRESPONDENCE
  TECHNICAL_SPECS
  PHOTOS
  VIDEOS
  AUDIO_RECORDINGS
  PRESENTATIONS
  MARKETING_MATERIALS
}

enum RateSource {
  MANUAL
  BANK_API
  CENTRAL_BANK
  FOREX_API
  CRYPTO_API
  INTERNAL_CALC
}

enum ContributionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ExpenditureCategory {
  OPERATIONAL
  PROJECT
  CAPITAL
  MAINTENANCE
  UTILITIES
  PERSONNEL
  MINISTRY
  OUTREACH
  EMERGENCY
  ADMINISTRATIVE
}

enum ExpenseFrequency {
  ONE_TIME
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  IRREGULAR
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_REVIEW
  ESCALATED
}

enum ExpenseUrgency {
  LOW
  NORMAL
  HIGH
  CRITICAL
  EMERGENCY
}

enum ReceiptType {
  INVOICE
  RECEIPT
  VOUCHER
  BANK_STATEMENT
  CONTRACT
  QUOTE
  PURCHASE_ORDER
  DELIVERY_NOTE
  OTHER
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
  UNDER_REVIEW
  PROBATION
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SupplierType {
  VENDOR
  CONTRACTOR
  SERVICE_PROVIDER
  CONSULTANT
  UTILITY_COMPANY
  GOVERNMENT_AGENCY
}

enum ContractStatus {
  DRAFT
  PENDING_REVIEW
  PENDING_SIGNATURE
  ACTIVE
  COMPLETED
  TERMINATED
  EXPIRED
}

enum ContractType {
  SERVICE
  SUPPLY
  CONSTRUCTION
  MAINTENANCE
  CONSULTING
  LEASE
  OTHER
}

enum AssetCategory {
  FURNITURE
  EQUIPMENT
  ELECTRONICS
  VEHICLES
  PROPERTY
  INSTRUMENTS
  SOFTWARE
  OTHER
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
  OBSOLETE
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  UPGRADE
  INSPECTION
}

enum BudgetType {
  ANNUAL
  QUARTERLY
  MONTHLY
  PROJECT_BASED
  EVENT_BASED
}

enum BudgetStatus {
  DRAFT
  APPROVED
  ACTIVE
  CLOSED
  REVISED
}
